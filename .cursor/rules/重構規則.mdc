---
description: 關於系統重構的整體策略與規劃。
alwaysApply: true
---

# 重構規則

## 整體重構策略

- **前端優先**: 目前以前端靜態頁面為主，部署於 Cloudflare。
- **前端取代**: 未來將取代夥伴目前位於 Linode 上的前端服務，統一由您的 Cloudflare 前端負責。
- **後端導流**: 夥伴的 Laravel 複雜後端邏輯將透過其 Linode VPS 導流過來。
- **API 統一**: 確保前端與後端之間的 API 介面保持一致，實現無縫切換與數據交換。

### 本地開發與整合考量

- **Docker 本地測試**：建議使用 Docker Desktop 在本地運行 Docker 進行測試，為未來與夥伴後端整合做準備。
- **前端重構影響**：由於前端進行了大規模重構，需特別留意其格式可能與夥伴後端不一致的情況，並在整合前進行充分測試與調整。


  簡單回答：後端必須做欄位映射，但前端不應該做。 如果您讓前端也參與映射，會導致架構混亂且難以維護。

  ---

  正確的架構：後端作為「翻譯官」，前端「保持無知」

  這個策略的核心是：您的後端 API
  應該提供一個穩定、一致的資料格式給前端。前端完全不需要知道後端的資料來源是誰。

  讓我們分解來看：


  後端 (Backend) - 這是映射應該發生的地方


   * 職責：後端的責任就是處理所有與外部系統 (夥伴的 MySQL) 的溝通和資料轉換。
   * 流程：
       1. 對內 (前端)：定義一套您自己系統的、清晰的 API 資料格式 (例如，使用者資料就是 { id, name, email,
          createdAt })。無論後端資料怎麼變，提供給前端的永遠是這個格式。
       2. 對外 (夥伴)：當需要寫入資料時，後端會接收來自前端的標準格式，然後在內部將其映射成夥伴資料庫的格式
          (例如，{ user_id, user_name, contact_email, creation_date })，再存入夥伴的 MySQL。
       3. 對外 (夥伴)：當需要讀取資料時，後端從夥伴的 MySQL 讀取資料，然後在內部將其映射回您自己的標準 API
          格式，再傳送給前端。

  這樣做，後端就成功扮演了「翻譯官」和「防火牆」的角色。


  前端 (Frontend) - 不應該處理任何映射


   * 職責：前端的責任是根據後端 API 提供的資料來渲染 UI，並與使用者互動。
   * 為什麼前端不該做映射？
       1. 架構混亂：如果前端需要知道夥伴的資料庫欄位，代表您的前端與「外部系統的內部實作」產生了緊密耦合 (Tight
           Coupling)。萬一夥伴未來改了欄位名稱，您不僅要改後端，連前端也要跟著改，這是維護上的災難。
       2. 增加複雜度：前端程式碼會變得很醜陋，到處都是 if (isPartnerData) { data.partner_field } else {
          data.my_field } 這樣的判斷，難以閱讀和測試。
       3. 安全性：後端可以過濾和清洗從夥伴資料庫來的資料，只提供必要的、乾淨的資料給前端。如果前端直接接觸映射
          ，可能會暴露不應暴露的資訊。

  ---

  推薦的資料流

  這是一個清晰的資料流圖：



   1 [前端] <--- (使用您定義的標準 API 格式) ---> [您的後端 API]
   2                                                   |
   3                                                   | (內部進行資料映射/翻譯)
   4                                                   |
   5 [夥伴的 MySQL] <--- (使用夥伴的資料庫欄位格式) ---> [您的後端資料存取層]


  結論


   * 能成功嗎？ 如果您只在後端正確地實作了完整的欄位映射（讀取和寫入雙向映射），那麼是的，絕對能成功。
   * 最佳實踐：將所有的映射邏輯都封裝在後端。讓前端保持簡單和「無知」，它只需要認識您後端 API
     定義的唯一一種資料格式即可。


  這樣不僅能成功對接，未來即使要更換或新增第二個夥伴，您也只需要在後端增加一個新的「翻譯模組」，而前端程式碼
  完全不需要變動。

╭───────────────────────────────────────────────────────────────────╮
│  > 建議做法 | 前端映射❌ 無  |後端映射 ✅ 有  | ✅ 只改後端
