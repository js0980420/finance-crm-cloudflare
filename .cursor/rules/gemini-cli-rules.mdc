# Gemini CLI 使用規則與指南

## 📋 基本規則

### ✅ Gemini CLI **可以做的事**
- **查看文件內容** - 讀取任何項目文件
- **分析代碼結構** - 理解項目架構和代碼邏輯
- **提供建議** - 給出代碼改進和最佳實踐建議
- **診斷問題** - 幫助識別bug、效能問題或設計缺陷
- **代碼審查** - 評估代碼品質和安全性
- **文檔生成** - 基於現有代碼生成說明文檔



## 🎯 主要使用場景

### 1. **快速讀取大量文件**
當需要理解大型代碼庫或多個相關文件時：

```bash
# 分析整個模組的結構
gemini -a -p "分析 backend/app/Models/ 目錄下所有模型的關係和設計模式"

# 快速掃描特定功能的所有相關文件
gemini -p "查看所有與案件管理相關的文件，包括控制器、模型、遷移和前端組件"
```

### 2. **重新理解對話內容**
當需要回顧之前的開發決策或重新理解某個功能實現時：

```bash
# 回顧整個案件狀態系統的設計
gemini -p "回顧並總結這個項目中 10 種案件狀態系統的完整設計，包括資料庫結構、模型定義、API 實現和前端頁面"

# 理解特定功能的實現邏輯
gemini -p "詳細解釋案件編輯彈窗組件的實現邏輯和數據流"
```

### 3. **代碼架構分析**
深度分析項目結構和設計模式：

```bash
# 分析前後端分離架構
gemini -p "分析這個 Laravel + Nuxt.js 項目的前後端分離架構設計"

# 檢查數據庫設計
gemini -p "分析所有資料庫遷移文件，評估數據庫結構設計的合理性"
```

## 🚀 常用命令模板

### **項目概覽**
```bash
# 快速了解整個項目
cd C:/Users/js098/Project/finance0810-develop
gemini -p "提供這個金融案件管理系統的完整概覽，包括主要功能、技術棧和架構設計"
```

### **功能分析**
```bash
# 分析特定功能模組
gemini -p "深入分析案件管理功能的完整實現，從數據庫到前端界面"

# 檢查 API 設計
gemini -p "評估所有 API 端點的設計，檢查是否符合 RESTful 最佳實踐"
```

### **代碼品質檢查**
```bash
# 檢查代碼一致性
gemini -p "檢查前端組件的代碼風格一致性和最佳實踐遵循情況"

# 安全性審查
gemini -p "檢查整個項目的安全性，特別是認證、授權和數據驗證部分"
```

### **效能分析**
```bash
# 前端效能
gemini -p "分析前端應用的效能瓶頸，特別是大型表格和數據載入部分"

# 後端效能
gemini -p "檢查後端 API 的效能，包括資料庫查詢優化和快取策略"
```

## 📚 使用技巧

### 1. **選擇合適的模型**
- **簡單查詢**: `gemini-1.5-flash` - 快速、成本較低
- **複雜分析**: `gemini-2.0-pro` - 深度分析、更準確

```bash
# 快速查詢
gemini -m "gemini-1.5-flash" -p "這個函數的作用是什麼？"

# 深度分析
gemini -m "gemini-2.0-pro" -p "完整分析整個案件工作流程的業務邏輯"
```

### 2. **包含文件範圍**
- **單一文件**: 直接指定檔案路徑
- **特定目錄**: 指定目錄路徑
- **整個項目**: 使用 `-a` 參數（謹慎使用）

```bash
# 單一文件
gemini -p "分析這個控制器" backend/app/Http/Controllers/Api/CaseController.php

# 特定目錄
gemini -p "分析前端組件設計" frontend/components/

# 整個項目（大量 token 消耗）
gemini -a -p "全面分析項目架構"
```

### 3. **有效的提示詞**
- **具體明確**: 說明想要了解的具體方面
- **包含上下文**: 提供相關的業務背景
- **分階段詢問**: 複雜問題分解為多個小問題

```bash
# ✅ 好的提示詞
gemini -p "在金融貸款業務背景下，分析這個案件狀態轉換邏輯是否符合實際業務流程，是否有遺漏的狀態或不合理的轉換"

# ❌ 模糊的提示詞
gemini -p "看看這個代碼"
```

## ⚠️ 注意事項

### **Token 使用管理**
- 使用 `-a` 參數會包含所有文件，消耗大量 token
- 大型項目建議分模組分析
- 重複詢問相似問題會浪費 token

### **資訊安全**
- Gemini CLI 會上傳文件內容到 Google 服務
- 確保不包含敏感資訊（API 金鑰、密碼等）
- 在使用前檢查 `.env` 文件是否已排除

### **結果驗證**
- AI 分析結果僅供參考
- 重要決策需要人工驗證
- 代碼建議需要測試驗證

## 📝 使用記錄

### **建議記錄格式**
每次重要的 Gemini CLI 使用都應該記錄：

```markdown
## [日期] Gemini CLI 使用記錄

**目的**: 分析案件狀態系統設計
**命令**: `gemini -p "分析 10 種案件狀態的設計合理性"`
**主要發現**:
- 狀態轉換邏輯合理
- 建議新增狀態歷史記錄
**後續行動**: 實現狀態變更日誌功能
```

---

## 🔗 相關資源

- [Gemini CLI 官方文檔](https://github.com/google/gemini-cli)
- [Google AI Studio](https://aistudio.google.com/)
- [Gemini API 文檔](https://ai.google.dev/docs)

---

**最後更新**: 2025年9月22日
**維護者**: 開發團隊
